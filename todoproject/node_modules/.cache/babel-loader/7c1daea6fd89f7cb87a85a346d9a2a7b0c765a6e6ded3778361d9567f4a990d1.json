{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bobae\\\\Desktop\\\\project\\\\react\\\\todoproject\\\\src\\\\component\\\\TodoList.js\";\n// import { useContext, useMemo, useState } from \"react\";\nimport \"./TodoList.css\";\n// import TodoItem from \"./TodoItem\";\n// import { TodoStateContext } from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  //     const todo = useContext(TodoStateContext);\n  //     //검색어를 상태로 관리\n  //     const [search, setSearch] = useState(\"\");\n  //     //검색어가 변경될 때 호출되는 함수\n  //     const onChangeSearch = (e) => {\n  //         setSearch(e.target.value); //검색어 상태 업데이트\n  //     };\n  //     //검색 결과 반환하는 함수\n  //     const getSearchResult = () => {\n  //         return search === \"\" ? todo : todo.filter((it) => it.content.toLowerCase().includes(search.toLowerCase()));\n  //     }\n\n  //     const analyzeTodo = useMemo(() => {\n  //         const totalCount = todo.length;\n  //         const doneCount = todo.filter((it) => it.isDone).length;\n  //         const notDoneCount = totalCount - doneCount;\n  //         return {\n  //             totalCount,\n  //             doneCount, \n  //             notDoneCount,\n  //         };\n  //     }, [todo]);\n\n  //     const {totalCount, doneCount, notDoneCount} = analyzeTodo;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TodoList\",\n    children: \"TodoList Component\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this)\n  //         <div className=\"TodoList\">\n  //             <h4>Todo List 🌱</h4>\n  //             <div>\n  //                 <div>총개수: {totalCount}</div>\n  //                 <div>완료된 할 일: {doneCount}</div>\n  //                 <div>아직 완료하지 못한 할 일: {notDoneCount}</div>\n  //             </div>\n  //             <input className=\"searchbar\" onChange={onChangeSearch} \n  //             placeholder=\"검색어를 입력하세요\" />\n  //             <div className=\"list_wrapper\">\n  //                 {getSearchResult().map((it) => (\n  //                     <TodoItem key={it.id} {...it} />\n  //                     // map을 이용해 컴포넌트를 리스트 형태로 반복적으로 렌더링하려면\n  //                     // 반드시 리스트 내의 고유한 key를 Props로 전달해야 함\n  //                     ))}\n  //             </div>\n  //         </div>\n  ;\n};\n// TodoList.defaultProps = {\n//     todo: [],\n//  };\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","TodoList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bobae/Desktop/project/react/todoproject/src/component/TodoList.js"],"sourcesContent":["// import { useContext, useMemo, useState } from \"react\";\r\nimport \"./TodoList.css\";\r\n// import TodoItem from \"./TodoItem\";\r\n// import { TodoStateContext } from \"./App\";\r\n\r\n const TodoList = () => {\r\n//     const todo = useContext(TodoStateContext);\r\n//     //검색어를 상태로 관리\r\n//     const [search, setSearch] = useState(\"\");\r\n//     //검색어가 변경될 때 호출되는 함수\r\n//     const onChangeSearch = (e) => {\r\n//         setSearch(e.target.value); //검색어 상태 업데이트\r\n//     };\r\n//     //검색 결과 반환하는 함수\r\n//     const getSearchResult = () => {\r\n//         return search === \"\" ? todo : todo.filter((it) => it.content.toLowerCase().includes(search.toLowerCase()));\r\n//     }\r\n\r\n//     const analyzeTodo = useMemo(() => {\r\n//         const totalCount = todo.length;\r\n//         const doneCount = todo.filter((it) => it.isDone).length;\r\n//         const notDoneCount = totalCount - doneCount;\r\n//         return {\r\n//             totalCount,\r\n//             doneCount, \r\n//             notDoneCount,\r\n//         };\r\n//     }, [todo]);\r\n\r\n//     const {totalCount, doneCount, notDoneCount} = analyzeTodo;\r\n\r\n    \r\n     return (\r\n        <div className=\"TodoList\">TodoList Component</div>\r\n//         <div className=\"TodoList\">\r\n//             <h4>Todo List 🌱</h4>\r\n//             <div>\r\n//                 <div>총개수: {totalCount}</div>\r\n//                 <div>완료된 할 일: {doneCount}</div>\r\n//                 <div>아직 완료하지 못한 할 일: {notDoneCount}</div>\r\n//             </div>\r\n//             <input className=\"searchbar\" onChange={onChangeSearch} \r\n//             placeholder=\"검색어를 입력하세요\" />\r\n//             <div className=\"list_wrapper\">\r\n//                 {getSearchResult().map((it) => (\r\n//                     <TodoItem key={it.id} {...it} />\r\n//                     // map을 이용해 컴포넌트를 리스트 형태로 반복적으로 렌더링하려면\r\n//                     // 반드시 리스트 내의 고유한 key를 Props로 전달해야 함\r\n//                     ))}\r\n//             </div>\r\n//         </div>\r\n     ) \r\n };\r\n// TodoList.defaultProps = {\r\n//     todo: [],\r\n//  };\r\n export default TodoList;\r\n"],"mappings":";AAAA;AACA,OAAO,gBAAgB;AACvB;AACA;AAAA,SAAAA,MAAA,IAAAC,OAAA;AAEC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAGK,oBACGD,OAAA;IAAKE,SAAS,EAAC,UAAU;IAAAC,QAAA,EAAC;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK;EACzD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEC,CAAC;AACF;AACA;AACA;AAAAC,EAAA,GAlDOP,QAAQ;AAmDd,eAAeA,QAAQ;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}