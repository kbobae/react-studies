{"ast":null,"code":"import './App.css';\nimport React, { useMemo, useCallback, useReducer, useRef } from 'react';\nimport Header from './Header';\nimport TodoEditor from './TodoEditor';\nimport TodoList from './TodoList';\n\n//export const TodoContext = React.createContext();\n// export const TodoStateContext = React.createContext();\n// export const TodoDispatchContext = React.createContext();\n//Context API를 사용하여 전역적으로 상태와 상태 관리 함수를 제공함\n//TodoStateContext : 할 일 목록 상태 공유\n//TodoDispatchContext : 할 일의 생성, 업데이트, 삭제 기능 공유\n\n//초기 할 일 목록을 정의한 배열\n// function App() {\n//   const mockTodo = [\n//     {\n//       id: 0,\n//     isDone: false,\n//     content: \"React 공부하기\",\n//     createdDate: new Date().getTime(),\n//   },\n//   {\n//     id: 1,\n//     isDone: false,\n//     content: \"빨래 널기\",\n//     createdDate: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     isDone: false,\n//     content: \"노래 연습하기\",\n//     createdDate: new Date().getTime(),\n//   }\n// ];\n\n//reducer : 할 일 목록의 상태를 업데이트하는 함수\n// function reducer(state, action){\n//   switch (action.type) {\n//     case \"CREATE\":{\n//       // 새로운 할 일 항목을 배열의 맨 앞에 추가하여 새로운 상태를 반환\n//       return [action.newItem, ...state];\n//     }\n//     case \"UPDATE\":{\n//       // 해당 id를 가진 항목을 찾아 완료 상태를 토글하고 상태를 반환\n//       return state.map((it) => \n//       it.id === action.targetId ? {...it, isDone:!it.isDone} : it);\n//     }\n//     case \"DELETE\":{\n//       // 해당 id를 가진 항목을 필터링하여 삭제하고 상태를 반환\n//       return state.filter((it) => it.id !== action.targetId);\n//     }\n//     default:\n//       return state;\n//   }\n// }\n\n//reducer함수와 mockTodo를 사용하여 현재 상태(todo), 상태 변경하는 함수(dispatch)를 반환\n// const [todo, dispatch] = useReducer(reducer, mockTodo);\n\n//새로운 todo 아이템의 id를 관리하기 위해 useRef 훅 사용\n// const idRef = useRef(3);\n\n//todo를 추가하는 함수 정의. -> TodoEditor 컴포넌트로 전달됨\n// const onCreate = (content) => {\n//   dispatch({\n//     type: \"CREATE\",\n//     newItem: {\n//       id: idRef.current,\n//       content,\n//       isDone: false,\n//       createdDate: new Date().getTime(),\n//     },\n//   });\n//   idRef.current += 1;\n// };\n\n//todo 수정하는 함수\n// const onUpdate = useCallback((targetId) => {\n//   dispatch({\n//     type: \"UPDATE\",\n//     targetId,\n//   });\n// }, []);\n\n//todo 삭제하는 함수\n// const onDelete = useCallback((targetId) => {\n//   dispatch({\n//     type: \"DELETE\",\n//     targetId,\n//   });\n// }, []);\n\n//메모이제이션 - 자식 컴포넌트에 전달할 때 불필요한 재생성 방지\n// const memoizedDispatch = useMemo(() => {\n//   return {onCreate, onUpdate, onDelete};\n// }, []);\n\n//   return (\n//     <div className=\"App\">\n//       <Header />\n//       <TodoStateContext.Provider value={todo}>\n//         <TodoDispatchContext.Provider value={memoizedDispatch}>\n//           <TodoEditor />\n//           <TodoList />\n//         </TodoDispatchContext.Provider>\n//       </TodoStateContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":["React","useMemo","useCallback","useReducer","useRef","Header","TodoEditor","TodoList"],"sources":["C:/Users/bobae/Desktop/project/react/todoproject/src/component/App.js"],"sourcesContent":["import './App.css';\nimport React, { useMemo, useCallback, useReducer, useRef } from 'react';\nimport Header from './Header';\nimport TodoEditor from './TodoEditor';\nimport TodoList from './TodoList';\n\n//export const TodoContext = React.createContext();\n// export const TodoStateContext = React.createContext();\n// export const TodoDispatchContext = React.createContext();\n//Context API를 사용하여 전역적으로 상태와 상태 관리 함수를 제공함\n//TodoStateContext : 할 일 목록 상태 공유\n//TodoDispatchContext : 할 일의 생성, 업데이트, 삭제 기능 공유\n\n//초기 할 일 목록을 정의한 배열\n// function App() {\n//   const mockTodo = [\n//     {\n//       id: 0,\n//     isDone: false,\n//     content: \"React 공부하기\",\n//     createdDate: new Date().getTime(),\n//   },\n//   {\n//     id: 1,\n//     isDone: false,\n//     content: \"빨래 널기\",\n//     createdDate: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     isDone: false,\n//     content: \"노래 연습하기\",\n//     createdDate: new Date().getTime(),\n//   }\n// ];\n\n//reducer : 할 일 목록의 상태를 업데이트하는 함수\n// function reducer(state, action){\n//   switch (action.type) {\n//     case \"CREATE\":{\n//       // 새로운 할 일 항목을 배열의 맨 앞에 추가하여 새로운 상태를 반환\n//       return [action.newItem, ...state];\n//     }\n//     case \"UPDATE\":{\n//       // 해당 id를 가진 항목을 찾아 완료 상태를 토글하고 상태를 반환\n//       return state.map((it) => \n//       it.id === action.targetId ? {...it, isDone:!it.isDone} : it);\n//     }\n//     case \"DELETE\":{\n//       // 해당 id를 가진 항목을 필터링하여 삭제하고 상태를 반환\n//       return state.filter((it) => it.id !== action.targetId);\n//     }\n//     default:\n//       return state;\n//   }\n// }\n\n//reducer함수와 mockTodo를 사용하여 현재 상태(todo), 상태 변경하는 함수(dispatch)를 반환\n// const [todo, dispatch] = useReducer(reducer, mockTodo);\n\n//새로운 todo 아이템의 id를 관리하기 위해 useRef 훅 사용\n// const idRef = useRef(3);\n\n//todo를 추가하는 함수 정의. -> TodoEditor 컴포넌트로 전달됨\n// const onCreate = (content) => {\n//   dispatch({\n//     type: \"CREATE\",\n//     newItem: {\n//       id: idRef.current,\n//       content,\n//       isDone: false,\n//       createdDate: new Date().getTime(),\n//     },\n//   });\n//   idRef.current += 1;\n// };\n\n//todo 수정하는 함수\n// const onUpdate = useCallback((targetId) => {\n//   dispatch({\n//     type: \"UPDATE\",\n//     targetId,\n//   });\n// }, []);\n\n//todo 삭제하는 함수\n// const onDelete = useCallback((targetId) => {\n//   dispatch({\n//     type: \"DELETE\",\n//     targetId,\n//   });\n// }, []);\n\n//메모이제이션 - 자식 컴포넌트에 전달할 때 불필요한 재생성 방지\n// const memoizedDispatch = useMemo(() => {\n//   return {onCreate, onUpdate, onDelete};\n// }, []);\n\n//   return (\n//     <div className=\"App\">\n//       <Header />\n//       <TodoStateContext.Provider value={todo}>\n//         <TodoDispatchContext.Provider value={memoizedDispatch}>\n//           <TodoEditor />\n//           <TodoList />\n//         </TodoDispatchContext.Provider>\n//       </TodoStateContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,OAAO,EAAEC,WAAW,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AACvE,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,YAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}