{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bobae\\\\Desktop\\\\project\\\\react\\\\todoproject\\\\src\\\\component\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useMemo, useCallback, useReducer, useRef } from 'react';\nimport Header from './Header';\nimport TodoEditor from './TodoEditor';\nimport TodoList from './TodoList';\n\n//export const TodoContext = React.createContext();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoStateContext = /*#__PURE__*/React.createContext();\nexport const TodoDispatchContext = /*#__PURE__*/React.createContext();\n//Context API를 사용하여 전역적으로 상태와 상태 관리 함수를 제공함\n//TodoStateContext : 할 일 목록 상태 공유\n//TodoDispatchContext : 할 일의 생성, 업데이트, 삭제 기능 공유\n\n//초기 할 일 목록을 정의한 배열\nfunction App() {\n  _s();\n  const mockTodo = [{\n    id: 0,\n    isDone: false,\n    content: \"React 공부하기\",\n    createdDate: new Date().getTime()\n  }, {\n    id: 1,\n    isDone: false,\n    content: \"빨래 널기\",\n    createdDate: new Date().getTime()\n  }, {\n    id: 2,\n    isDone: false,\n    content: \"노래 연습하기\",\n    createdDate: new Date().getTime()\n  }];\n\n  //reducer : 할 일 목록의 상태를 업데이트하는 함수\n  function reducer(state, action) {\n    switch (action.type) {\n      case \"CREATE\":\n        {\n          // 새로운 할 일 항목을 배열의 맨 앞에 추가하여 새로운 상태를 반환\n          return [action.newItem, ...state];\n        }\n      case \"UPDATE\":\n        {\n          // 해당 id를 가진 항목을 찾아 완료 상태를 토글하고 상태를 반환\n          return state.map(it => it.id === action.targetId ? {\n            ...it,\n            isDone: !it.isDone\n          } : it);\n        }\n      case \"DELETE\":\n        {\n          // 해당 id를 가진 항목을 필터링하여 삭제하고 상태를 반환\n          return state.filter(it => it.id !== action.targetId);\n        }\n      default:\n        return state;\n    }\n  }\n\n  //reducer함수와 mockTodo를 사용하여 현재 상태(todo), 상태\n  const [todo, dispatch] = useReducer(reducer, mockTodo);\n\n  //새로운 todo 아이템의 id를 관리하기 위해 useRef 훅 사용\n  const idRef = useRef(3);\n\n  //todo를 추가하는 함수 정의. -> TodoEditor 컴포넌트로 전달됨\n  const onCreate = content => {\n    dispatch({\n      type: \"CREATE\",\n      newItem: {\n        id: idRef.current,\n        content,\n        isDone: false,\n        createdDate: new Date().getTime()\n      }\n    });\n    idRef.current += 1;\n  };\n\n  //todo 수정하는 함수\n  const onUpdate = useCallback(targetId => {\n    dispatch({\n      type: \"UPDATE\",\n      targetId\n    });\n  }, []);\n\n  //todo 삭제하는 함수\n  const onDelete = useCallback(targetId => {\n    dispatch({\n      type: \"DELETE\",\n      targetId\n    });\n  }, []);\n  const memoizedDispatch = useMemo(() => {\n    return {\n      onCreate,\n      onUpdate,\n      onDelete\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoStateContext.Provider, {\n      value: todo,\n      children: /*#__PURE__*/_jsxDEV(TodoDispatchContext.Provider, {\n        value: memoizedDispatch,\n        children: [/*#__PURE__*/_jsxDEV(TodoEditor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JSvCc/JDYE1lF4+L00V/QI8CAdA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useMemo","useCallback","useReducer","useRef","Header","TodoEditor","TodoList","jsxDEV","_jsxDEV","TodoStateContext","createContext","TodoDispatchContext","App","_s","mockTodo","id","isDone","content","createdDate","Date","getTime","reducer","state","action","type","newItem","map","it","targetId","filter","todo","dispatch","idRef","onCreate","current","onUpdate","onDelete","memoizedDispatch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["C:/Users/bobae/Desktop/project/react/todoproject/src/component/App.js"],"sourcesContent":["import './App.css';\nimport React, { useMemo, useCallback, useReducer, useRef } from 'react';\nimport Header from './Header';\nimport TodoEditor from './TodoEditor';\nimport TodoList from './TodoList';\n\n//export const TodoContext = React.createContext();\nexport const TodoStateContext = React.createContext();\nexport const TodoDispatchContext = React.createContext();\n//Context API를 사용하여 전역적으로 상태와 상태 관리 함수를 제공함\n//TodoStateContext : 할 일 목록 상태 공유\n//TodoDispatchContext : 할 일의 생성, 업데이트, 삭제 기능 공유\n\n//초기 할 일 목록을 정의한 배열\nfunction App() {\n  const mockTodo = [\n    {\n      id: 0,\n    isDone: false,\n    content: \"React 공부하기\",\n    createdDate: new Date().getTime(),\n  },\n  {\n    id: 1,\n    isDone: false,\n    content: \"빨래 널기\",\n    createdDate: new Date().getTime(),\n  },\n  {\n    id: 2,\n    isDone: false,\n    content: \"노래 연습하기\",\n    createdDate: new Date().getTime(),\n  }\n];\n\n//reducer : 할 일 목록의 상태를 업데이트하는 함수\nfunction reducer(state, action){\n  switch (action.type) {\n    case \"CREATE\":{\n      // 새로운 할 일 항목을 배열의 맨 앞에 추가하여 새로운 상태를 반환\n      return [action.newItem, ...state];\n    }\n    case \"UPDATE\":{\n      // 해당 id를 가진 항목을 찾아 완료 상태를 토글하고 상태를 반환\n      return state.map((it) => \n      it.id === action.targetId ? {...it, isDone:!it.isDone} : it);\n    }\n    case \"DELETE\":{\n      // 해당 id를 가진 항목을 필터링하여 삭제하고 상태를 반환\n      return state.filter((it) => it.id !== action.targetId);\n    }\n    default:\n      return state;\n  }\n}\n\n//reducer함수와 mockTodo를 사용하여 현재 상태(todo), 상태\nconst [todo, dispatch] = useReducer(reducer, mockTodo);\n\n//새로운 todo 아이템의 id를 관리하기 위해 useRef 훅 사용\nconst idRef = useRef(3);\n\n//todo를 추가하는 함수 정의. -> TodoEditor 컴포넌트로 전달됨\nconst onCreate = (content) => {\n  dispatch({\n    type: \"CREATE\",\n    newItem: {\n      id: idRef.current,\n      content,\n      isDone: false,\n      createdDate: new Date().getTime(),\n    },\n  });\n  idRef.current += 1;\n};\n\n//todo 수정하는 함수\nconst onUpdate = useCallback((targetId) => {\n  dispatch({\n    type: \"UPDATE\",\n    targetId,\n  });\n}, []);\n\n//todo 삭제하는 함수\nconst onDelete = useCallback((targetId) => {\n  dispatch({\n    type: \"DELETE\",\n    targetId,\n  });\n}, []);\n\nconst memoizedDispatch = useMemo(() => {\n  return {onCreate, onUpdate, onDelete};\n}, []);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <TodoStateContext.Provider value={todo}>\n        <TodoDispatchContext.Provider value={memoizedDispatch}>\n          <TodoEditor />\n          <TodoList />\n        </TodoDispatchContext.Provider>\n      </TodoStateContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}