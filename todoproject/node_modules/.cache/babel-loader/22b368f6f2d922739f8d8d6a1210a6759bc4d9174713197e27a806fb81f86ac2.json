{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bobae\\\\Desktop\\\\project\\\\react\\\\todoproject\\\\src\\\\component\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useCallback, useReducer, useRef } from 'react';\nimport Header from './Header';\nimport TodoEditor from './TodoEditor';\nimport TodoList from './TodoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContext = React;\nfunction App() {\n  _s();\n  const mockTodo = [{\n    id: 0,\n    isDone: false,\n    content: \"React 공부하기\",\n    createdDate: new Date().getTime()\n  }, {\n    id: 1,\n    isDone: false,\n    content: \"빨래 널기\",\n    createdDate: new Date().getTime()\n  }, {\n    id: 2,\n    isDone: false,\n    content: \"노래 연습하기\",\n    createdDate: new Date().getTime()\n  }];\n  function reducer(state, action) {\n    switch (action.type) {\n      case \"CREATE\":\n        {\n          // 새로운 할 일 항목을 배열의 맨 앞에 추가하여 새로운 상태를 반환\n          return [action.newItem, ...state];\n        }\n      case \"UPDATE\":\n        {\n          // 해당 id를 가진 항목을 찾아 완료 상태를 토글하고 상태를 반환\n          return state.map(it => it.id === action.targetId ? {\n            ...it,\n            isDone: !it.isDone\n          } : it);\n        }\n      case \"DELETE\":\n        {\n          // 해당 id를 가진 항목을 필터링하여 삭제하고 상태를 반환\n          return state.filter(it => it.id !== action.targetId);\n        }\n      default:\n        return state;\n    }\n  }\n  const [todo, dispatch] = useReducer(reducer, mockTodo);\n\n  //새로운 todo 아이템의 id를 관리하기 위해 useRef 훅 사용\n  const idRef = useRef(3);\n\n  //todo를 추가하는 함수 정의. -> TodoEditor 컴포넌트로 전달됨\n  const onCreate = content => {\n    dispatch({\n      type: \"CREATE\",\n      newItem: {\n        id: idRef.current,\n        content,\n        isDone: false,\n        createdDate: new Date().getTime()\n      }\n    });\n    idRef.current += 1;\n  };\n\n  //todo 수정하는 함수\n  const onUpdate = useCallback(targetId => {\n    dispatch({\n      type: \"UPDATE\",\n      targetId\n    });\n  }, []);\n\n  //todo 삭제하는 함수\n  const onDelete = useCallback(targetId => {\n    dispatch({\n      type: \"DELETE\",\n      targetId\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      todo: todo,\n      onUpdate: onUpdate,\n      onDelete: onDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aPY3XoxHdQ+UnD0hZhu9ex+5LF8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useReducer","useRef","Header","TodoEditor","TodoList","jsxDEV","_jsxDEV","TodoContext","App","_s","mockTodo","id","isDone","content","createdDate","Date","getTime","reducer","state","action","type","newItem","map","it","targetId","filter","todo","dispatch","idRef","onCreate","current","onUpdate","onDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bobae/Desktop/project/react/todoproject/src/component/App.js"],"sourcesContent":["import './App.css';\nimport React, { useCallback, useReducer, useRef } from 'react';\nimport Header from './Header';\nimport TodoEditor from './TodoEditor';\nimport TodoList from './TodoList';\n\nconst TodoContext = React\n\nfunction App() {\n  const mockTodo = [\n    {\n      id: 0,\n    isDone: false,\n    content: \"React 공부하기\",\n    createdDate: new Date().getTime(),\n  },\n  {\n    id: 1,\n    isDone: false,\n    content: \"빨래 널기\",\n    createdDate: new Date().getTime(),\n  },\n  {\n    id: 2,\n    isDone: false,\n    content: \"노래 연습하기\",\n    createdDate: new Date().getTime(),\n  }\n];\n\nfunction reducer(state, action){\n  switch (action.type) {\n    case \"CREATE\":{\n      // 새로운 할 일 항목을 배열의 맨 앞에 추가하여 새로운 상태를 반환\n      return [action.newItem, ...state];\n    }\n    case \"UPDATE\":{\n      // 해당 id를 가진 항목을 찾아 완료 상태를 토글하고 상태를 반환\n      return state.map((it) => \n      it.id === action.targetId ? {...it, isDone:!it.isDone} : it);\n    }\n    case \"DELETE\":{\n      // 해당 id를 가진 항목을 필터링하여 삭제하고 상태를 반환\n      return state.filter((it) => it.id !== action.targetId);\n    }\n    default:\n      return state;\n  }\n}\n\nconst [todo, dispatch] = useReducer(reducer, mockTodo);\n\n//새로운 todo 아이템의 id를 관리하기 위해 useRef 훅 사용\nconst idRef = useRef(3);\n\n//todo를 추가하는 함수 정의. -> TodoEditor 컴포넌트로 전달됨\nconst onCreate = (content) => {\n  dispatch({\n    type: \"CREATE\",\n    newItem: {\n      id: idRef.current,\n      content,\n      isDone: false,\n      createdDate: new Date().getTime(),\n    },\n  });\n  idRef.current += 1;\n};\n\n//todo 수정하는 함수\nconst onUpdate = useCallback((targetId) => {\n  dispatch({\n    type: \"UPDATE\",\n    targetId,\n  });\n}, []);\n\n//todo 삭제하는 함수\nconst onDelete = useCallback((targetId) => {\n  dispatch({\n    type: \"DELETE\",\n    targetId,\n  });\n}, []);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <TodoEditor onCreate={onCreate} />\n      <TodoList todo={todo} onUpdate={onUpdate} onDelete={onDelete} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}