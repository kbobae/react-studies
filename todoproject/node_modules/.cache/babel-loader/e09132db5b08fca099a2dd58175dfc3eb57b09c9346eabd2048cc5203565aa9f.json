{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bobae\\\\Desktop\\\\project\\\\react\\\\todoproject\\\\src\\\\component\\\\App.js\";\nimport './App.css';\n// import React, { useMemo, useCallback, useReducer, useRef } from 'react';\n// import Header from './Header';\n// import TodoEditor from './TodoEditor';\n// import TodoList from './TodoList';\n\n//export const TodoContext = React.createContext();\n// export const TodoStateContext = React.createContext();\n// export const TodoDispatchContext = React.createContext();\n//Context API를 사용하여 전역적으로 상태와 상태 관리 함수를 제공함\n//TodoStateContext : 할 일 목록 상태 공유\n//TodoDispatchContext : 할 일의 생성, 업데이트, 삭제 기능 공유\n\n//초기 할 일 목록을 정의한 배열\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  //   const mockTodo = [\n  //     {\n  //       id: 0,\n  //     isDone: false,\n  //     content: \"React 공부하기\",\n  //     createdDate: new Date().getTime(),\n  //   },\n  //   {\n  //     id: 1,\n  //     isDone: false,\n  //     content: \"빨래 널기\",\n  //     createdDate: new Date().getTime(),\n  //   },\n  //   {\n  //     id: 2,\n  //     isDone: false,\n  //     content: \"노래 연습하기\",\n  //     createdDate: new Date().getTime(),\n  //   }\n  // ];\n\n  //reducer : 할 일 목록의 상태를 업데이트하는 함수\n  // function reducer(state, action){\n  //   switch (action.type) {\n  //     case \"CREATE\":{\n  //       // 새로운 할 일 항목을 배열의 맨 앞에 추가하여 새로운 상태를 반환\n  //       return [action.newItem, ...state];\n  //     }\n  //     case \"UPDATE\":{\n  //       // 해당 id를 가진 항목을 찾아 완료 상태를 토글하고 상태를 반환\n  //       return state.map((it) => \n  //       it.id === action.targetId ? {...it, isDone:!it.isDone} : it);\n  //     }\n  //     case \"DELETE\":{\n  //       // 해당 id를 가진 항목을 필터링하여 삭제하고 상태를 반환\n  //       return state.filter((it) => it.id !== action.targetId);\n  //     }\n  //     default:\n  //       return state;\n  //   }\n  // }\n\n  //reducer함수와 mockTodo를 사용하여 현재 상태(todo), 상태 변경하는 함수(dispatch)를 반환\n  // const [todo, dispatch] = useReducer(reducer, mockTodo);\n\n  //새로운 todo 아이템의 id를 관리하기 위해 useRef 훅 사용\n  // const idRef = useRef(3);\n\n  //todo를 추가하는 함수 정의. -> TodoEditor 컴포넌트로 전달됨\n  // const onCreate = (content) => {\n  //   dispatch({\n  //     type: \"CREATE\",\n  //     newItem: {\n  //       id: idRef.current,\n  //       content,\n  //       isDone: false,\n  //       createdDate: new Date().getTime(),\n  //     },\n  //   });\n  //   idRef.current += 1;\n  // };\n\n  //todo 수정하는 함수\n  // const onUpdate = useCallback((targetId) => {\n  //   dispatch({\n  //     type: \"UPDATE\",\n  //     targetId,\n  //   });\n  // }, []);\n\n  //todo 삭제하는 함수\n  // const onDelete = useCallback((targetId) => {\n  //   dispatch({\n  //     type: \"DELETE\",\n  //     targetId,\n  //   });\n  // }, []);\n\n  //메모이제이션 - 자식 컴포넌트에 전달할 때 불필요한 재생성 방지\n  // const memoizedDispatch = useMemo(() => {\n  //   return {onCreate, onUpdate, onDelete};\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Todo Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Todo Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 6\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Header","_c","$RefreshReg$"],"sources":["C:/Users/bobae/Desktop/project/react/todoproject/src/component/App.js"],"sourcesContent":["import './App.css';\n// import React, { useMemo, useCallback, useReducer, useRef } from 'react';\n// import Header from './Header';\n// import TodoEditor from './TodoEditor';\n// import TodoList from './TodoList';\n\n//export const TodoContext = React.createContext();\n// export const TodoStateContext = React.createContext();\n// export const TodoDispatchContext = React.createContext();\n//Context API를 사용하여 전역적으로 상태와 상태 관리 함수를 제공함\n//TodoStateContext : 할 일 목록 상태 공유\n//TodoDispatchContext : 할 일의 생성, 업데이트, 삭제 기능 공유\n\n//초기 할 일 목록을 정의한 배열\n function App() {\n  \n//   const mockTodo = [\n//     {\n//       id: 0,\n//     isDone: false,\n//     content: \"React 공부하기\",\n//     createdDate: new Date().getTime(),\n//   },\n//   {\n//     id: 1,\n//     isDone: false,\n//     content: \"빨래 널기\",\n//     createdDate: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     isDone: false,\n//     content: \"노래 연습하기\",\n//     createdDate: new Date().getTime(),\n//   }\n// ];\n\n//reducer : 할 일 목록의 상태를 업데이트하는 함수\n// function reducer(state, action){\n//   switch (action.type) {\n//     case \"CREATE\":{\n//       // 새로운 할 일 항목을 배열의 맨 앞에 추가하여 새로운 상태를 반환\n//       return [action.newItem, ...state];\n//     }\n//     case \"UPDATE\":{\n//       // 해당 id를 가진 항목을 찾아 완료 상태를 토글하고 상태를 반환\n//       return state.map((it) => \n//       it.id === action.targetId ? {...it, isDone:!it.isDone} : it);\n//     }\n//     case \"DELETE\":{\n//       // 해당 id를 가진 항목을 필터링하여 삭제하고 상태를 반환\n//       return state.filter((it) => it.id !== action.targetId);\n//     }\n//     default:\n//       return state;\n//   }\n// }\n\n//reducer함수와 mockTodo를 사용하여 현재 상태(todo), 상태 변경하는 함수(dispatch)를 반환\n// const [todo, dispatch] = useReducer(reducer, mockTodo);\n\n//새로운 todo 아이템의 id를 관리하기 위해 useRef 훅 사용\n// const idRef = useRef(3);\n\n//todo를 추가하는 함수 정의. -> TodoEditor 컴포넌트로 전달됨\n// const onCreate = (content) => {\n//   dispatch({\n//     type: \"CREATE\",\n//     newItem: {\n//       id: idRef.current,\n//       content,\n//       isDone: false,\n//       createdDate: new Date().getTime(),\n//     },\n//   });\n//   idRef.current += 1;\n// };\n\n//todo 수정하는 함수\n// const onUpdate = useCallback((targetId) => {\n//   dispatch({\n//     type: \"UPDATE\",\n//     targetId,\n//   });\n// }, []);\n\n//todo 삭제하는 함수\n// const onDelete = useCallback((targetId) => {\n//   dispatch({\n//     type: \"DELETE\",\n//     targetId,\n//   });\n// }, []);\n\n//메모이제이션 - 자식 컴포넌트에 전달할 때 불필요한 재생성 방지\n// const memoizedDispatch = useMemo(() => {\n//   return {onCreate, onUpdate, onDelete};\n// }, []);\n\n   return (\n     <div className=\"App\">\n      <div>Header</div>\n      <div>Todo Editor</div>\n      <div>Todo List</div>\n       <Header />\n       <div>Todo Editor</div>\n       {/* <TodoStateContext.Provider value={todo}> */}\n         {/* <TodoDispatchContext.Provider value={memoizedDispatch}> */}\n           {/* <TodoEditor /> */}\n           {/* <TodoList /> */}\n         {/* </TodoDispatchContext.Provider> */}\n       {/* </TodoStateContext.Provider> */}\n     </div>\n   );\n }\n\n export default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAA,MAAA,IAAAC,OAAA;AACC,SAASC,GAAGA,CAAA,EAAG;EAEhB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEG,oBACED,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACnBH,OAAA;MAAAG,QAAA,EAAK;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACjBP,OAAA;MAAAG,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACtBP,OAAA;MAAAG,QAAA,EAAK;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnBP,OAAA,CAACQ,MAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVP,OAAA;MAAAG,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAOnB,CAAC;AAEV;AAACE,EAAA,GApGQR,GAAG;AAsGZ,eAAeA,GAAG;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}